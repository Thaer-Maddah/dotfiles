#=================================================
# File Location: ~/.tmux.conf
# Folder Location: ~/.tmux
#=================================================
# $Id: t-williams.conf,v 1.1 2008-11-02 18:59:28 nicm Exp $
#
# ~/.tmux.conf - tmux terminal multiplexer config
# Thayer Williams (http://cinderwick.ca)
# "Feel free to do whatever you like with it."

# I typically start tmux from ~/.xinitrc with the following:
#
#   urxvt -e bash -c "tmux attach -d -t mysession" &
#
# and recall it any time thereafter with xbindkeys (Mod4+s):
#
#   "urxvt -e bash -c 'tmux attach -d -t mysession'"
#     m:0x50 + c:39

# set prefix key to ctrl+a until I have time to adapt
unbind C-b
set -g prefix C-a

# reload tmux new configurations
bind-key -r tmux source-file ~/.tmux.conf

# send the prefix to client inside window (ala nested sessions)
bind-key a send-prefix

# toggle last window like screen
#bind-key C-a last-window

# confirm before killing a window or the server
bind-key k confirm kill-window
bind-key K confirm kill-server

# toggle statusbar
bind-key b set-option status

# ctrl+left/right cycles thru windows
bind-key -n C-S-right next
bind-key -n C-S-left prev

# open a man page in new window
bind / command-prompt "split-window 'exec man %%'"

# quick view of processes
bind '~' split-window "exec htop"

# scrollback buffer n lines
set -g history-limit 5000

# listen for activity on all windows
set -g bell-action any

# on-screen time for display-panes in ms
set -g display-panes-time 2000

# start window indexing at one instead of zero
set -g base-index 1

# enable wm window titles
set -g set-titles on

# wm window title string (uses statusbar variables)
#set -g set-titles-string "tmux.#I.#W"
set -g set-titles-string "Terminal:#I:#W"


# session initialization
#new -s mysession mutt
#neww -t 2 
#splitw -v -p 50 -t 0 iftop
#neww -d -t 3 iftop
#neww -d -t 5 mocp
#neww -d -t 6 rtorrent
#selectw -t 1

new  -s SessionName -n WindowName Command
# neww -n foo/bar foo
# splitw -v -p 50 -t 0 bar
# selectw -t 1 
# selectp -t 0

# statusbar --------------------------------------------------------------
if-shell -b '[ "$(whoami)" == "root" ]' \
   "set -g status off"

set -g display-time 2000

set-option status on

# default statusbar colors
set-option -g status-fg white
set-option -ag status-style bg=default # if we use status-bg we lose transparency on status bar
# set -g status-attr default

# default window title colors
# set-window-option -g window-status-fg white #cyan
# set-window-option -g window-status-bg default
#set-window-option -g window-status-attr bright

# active window title colors
set-window-option -g window-status-style fg=default
set-window-option -g window-status-style bg=default
set-window-option -g window-status-current-style bg=red
# set-window-option -g window-status-style attr=bright

# center align the window list
set -g status-justify centre

# show some useful stats but only when tmux is started 
# outside of Xorg, otherwise dwm statusbar shows these already
set -g mouse on
# bind -n WheelUpPane copy-mode
#set -g terminal-overrides 'xterm*:smcup@:rmcup@'

#if '[ -z "$DISPLAY" ]' 'set -g status-left "[#[fg=red] #H #[default]]"'
#if '[ -z "$DISPLAY" ]' 'set -g status-right "[ #[fg=magenta]#(cat /proc/loadavg | cut -d \" \" -f 1,2,3)#[default] ][ #[fg=cyan,bright]%a %Y-%m-%d %H:%M #[default]]"'
#if '[ -z "$DISPLAY" ]' 'set -g status-right-length 50'

# source "/usr/share/tmux/powerline.conf"

#Faster Command Sequences
set -s escape-time 0


# for vim
#set -g @resurrect-strategy-vim 'session'
# # for neovim
# set -g @resurrect-strategy-nvim 'session'
#


# vim keys in copy or choice mode
#setw -g mode-keys vi

# copying selection vim style
# http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
# https://github.com/myfreeweb/dotfiles/blob/master/tmux.conf
bind-key Escape copy-mode         # enter copy mode; default [
#bind-key -t vi-copy Escape cancel     # exit copy mode; or hit q
#bind-key p paste-buffer               # paste; default ]
#bind-key -t vi-copy v begin-selection     # begin visual mode
#bind-key -t vi-copy V select-line     # visual line
#bind-key -t vi-copy y copy-selection      # yank
#bind-key -t vi-copy r rectangle-toggle        # visual block toggle

# read and write and delete paste buffer ( xsel method)
# https://wiki.archlinux.org/index.php/Tmux#ICCCM_Selection_Integration
# ctrl+shift+v
#bind-key < command-prompt -p "send to tmux:" "run-shell 'tmux set-buffer --
#\"$(xsel -o -b)\"'"
#	bind-key > command-prompt -p "send to xsel:" "run-shell 'tmux show-buffer | xsel -i -b'"
#bind-key + command-prompt "delete-buffer"

## Use vim keybindings in copy mode
set-window-option -g mode-keys vi	# This line is very important to run vi mode
#unbind p
bind-key P choose-buffer	# Tmux clipboard history
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -sel clip > /dev/null"
bind-key p run "xclip -o -sel clip | tmux load-buffer - ; tmux paste-buffer"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'


## Restore Vim sessions
set -g @resurrect-strategy-vim 'session'
## Restore Neovim sessions
set -g @resurrect-strategy-nvim 'session'
## Restore Panes
#set -g @resurrect-capture-pane-contents 'on'
## Restore last saved environment (automatically)
set -g @continuum-restore 'on'

# # Other examples:
# # set -g @plugin 'github_username/plugin_name'
# # set -g @plugin 'git@github.com/user/plugin'
# # set -g @plugin 'git@bitbucket.com/user/plugin'
#
# # Initialize TMUX plugin manager (keep this line at the very bottom of
# tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
