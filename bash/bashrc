#!/bin/bash
# Set font configurations
# do not use tput command because missing up the long lines in terminal
# do not use code like Bla='\e[0;30m' because it does the same thing as tput 
# _BOLD=$(tput bold)
_RED="\[\033[1;31m\]"
_GREEN="\[\033[1;32m\]"
_YELLOW="\[\033[1;33m\]"
_BLUE="\[\033[1;34m\]"
_MAGENTA="\[\033[1;35m\]"
_CYAN="\[\033[1;36m\]"
_WHITE="\[\033[1;37m\]"
_RESET="\[\033[0;0m\]"  # reset color to default color

# alias tmux='TERM=screen-256color tmux'
DIR=$HOME/git
DOTFILES=$HOME/git/dotfiles
CODEDIR=$HOME/git/Code
export XDG_CONFIG_HOME=~/.config

# Add x11-ssh-askpass pacakge to check sudo privileges on neovim
# when save file by command :w !sudo tee %
export SUDO_ASKPASS=/usr/lib/ssh/x11-ssh-askpass
# Adding environment variable for ssh-agent service
export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR"/ssh-agent.socket
# Get the colors in the opened man page itself
#export MANPAGER="sh -c 'col -bx | bat -l man -p --paging always'"
export MANPAGER="sh -c 'bat -l man -p --paging always'"

# we can ls file without named a specific folder, not a good practice
# ls **/filename
# shopt -s globstar

[[ -f ~/bashrc ]] && 	. "$HOME"/.bashrc

[[ -f ~/.profile ]] && . "$HOME"/.profile

# Export bin folder path
[[ -d $HOME/.local/bin ]] && export PATH=$HOME/.local/bin:$PATH

# If not running interactively, don't do anything
[[ $- != *i* ]] && return
# [[ -f "$HOME"/git/dotfiles/wallpaper.sh ]] && sh wallpaper.sh &
# [ -f /etc/bash_completio ] && source /etc/bash_completion
# [[ -z "$TMUX" ]] && exec tmux
[[ -f "$HOME"/.fzf.bash ]] && source "$HOME"/.fzf.bash
[[ -f "$DOTFILES"/bash/aliases ]] && source "$DOTFILES"/bash/aliases
# [[ -f "$HOME"/.git-status.sh ]] && source "$HOME"/.git-status.sh

# neofetch slowing down bash at startup
#[[ -f "$CODEDIR"/bash/unix ]] && clear && neofetch --source "$CODEDIR"/bash/unix
[[ -f /usr/bin/numlockx ]] && numlockx

# Zsh like completion
bind 'set completion-ignore-case On'
bind 'set show-all-if-ambiguous on'
bind 'TAB:menu-complete'
complete -cf doas

# SSH prompt
# local SSH_IP=`echo $SSH_CLIENT | awk '{ print $1 }'`
# local SSH2_IP=`echo $SSH2_CLIENT | awk '{ print $1 }'`
# if [ $SSH2_IP ] || [ $SSH_IP ] ; then
#     local SSH_FLAG="@\h"
   
# don't put duplicate lines or lines starts with space in the history. See bash(1) for more options
export HISTCONTROL=ignoreboth
shopt -s histappend

shopt -s histreedit
shopt -s histverify
#PROMPT_COMMAND="history -a;history -c;history -r; $PROMPT_COMMAND"
# export HISTTIMEFORMAT="[%d-%m %T] "
export HISTIGNORE=" *:history:man *:pwd:fg:exit:clear"
HISTSIZE= HISTFILESIZE= #Infinite 
# alias ls='ls --color=auto'

# Display git status
# https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
if [[ -f "$DOTFILES"/bash/git-prompt.sh  ]]; then
    source "$DOTFILES"/bash/git-prompt.sh 

    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    GIT_PS1_SHOWCOLORHINTS=1

    if [[ $UID == 0 || $EUID == 0 ]]; then
        set_bash_prompt_color() {
        PS1="${_GREEN}\u@${_CYAN}\W$(__git_ps1 " (%s)")${_GREEN}# ${_RESET}"
        }
    else
        set_bash_prompt_color() {
        PS1="${_GREEN}\u@${_CYAN}\W$(__git_ps1 " (%s)")${_GREEN}➜ ${_RESET}"
        }
    fi
else 
    if [[ $UID == 0 || $EUID == 0 ]]; then
        set_bash_prompt_color() {
        PS1="${_GREEN}\u@${_CYAN}\W${_GREEN}# ${_RESET}"
        }
    else
        set_bash_prompt_color() {
        PS1="${_GREEN}\u@${_CYAN}\W${_GREEN}➜ ${_RESET}"
        }
    fi
fi

PROMPT_COMMAND=set_bash_prompt_color
# PROMPT_COMMAND='PS1="\u@${_GREEN}\W$(__git_ps1 " (%s)")➜ "'
# Run commands at startup
# Suckless section


#if pgrep -x "dwm" > /dev/null && ! pgrep -x "slstatus" > /dev/null; then 
#    slstatus & > /dev/null 2>&1
#fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# Docker env
# https://docs.docker.com/engine/security/rootless/
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock

# Extract Files and Folders
extract () {
if [ -f $1 ] ; then
  case $1 in
    *.tar.bz2)   tar xjf $1     ;;
    *.tar.gz)    tar xzf $1     ;;
    *.bz2)       bunzip2 $1     ;;
    *.rar)       unrar e $1     ;;
    *.gz)        gunzip $1      ;;
    *.tar)       tar xf $1      ;;
    *.tbz2)      tar xjf $1     ;;
    *.tgz)       tar xzf $1     ;;
    *.zip)       unzip $1       ;;
    *.Z)         uncompress $1  ;;
    *.7z)        7z x $1        ;;
    *)     echo "'$1' cannot be
    extracted via extract()"
    ;;
    esac
  else
    echo "'$1' is
    not a valid
    file"
    fi
}

# Emacs 
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"                  # $EDITOR opens in terminal
export VISUAL="emacsclient -c -a emacs"         # $VISUAL opens in GUI mode
